@{
    ViewBag.Title = "Home Page";
}

<button id="upload-button">Select PDF</button>
<input type="file" id="file-to-upload" accept="application/pdf" />
<div id="controlpdf" style="text-align: center;visibility: hidden;">
	<button id="prevbutton" type="button">prev page</button>
	<button id="nextbutton" type="button">next page</button>
	<!--<button id="zoominbutton" type="button">zoom in</button>
	<button id="zoomoutbutton" type="button">zoom out</button>-->
	<button id="cmd">generate PDF</button>
</div>
<div style="text-align: center;visibility: hidden;margin-top:10px;" id="page-count-container">
	Page 
	<div id="pdf-current-page"></div> 
	of 
	<div id="pdf-total-pages"></div>
</div>
<div style="text-align: center;margin-top: 17px;margin-bottom: 10px;font-weight: bolder;">Choose Color</div>
<div id="buttonTool" style="text-align: center">
	<button type="button" style="background:green;" id="green" onclick="color(this)">green</button>
	<button type="button" style="background:blue;" id="blue" onclick="color(this)">blue</button>
	<button type="button" style="background:red;" id="red" onclick="color(this)">red</button>
	<button type="button" style="background:yellow;" id="yellow" onclick="color(this)">yellow</button>
	<button type="button" style="background:orange;" id="orange" onclick="color(this)">orange</button>
	<button type="button" style="background:black;color:white" id="black" onclick="color(this)">black</button>
	<button type="button" style="background:white;" id="white" onclick="color(this)">white</button>

	<!--<button type="button" value="save" id="btn" size="30" onclick="save()">Save</button>-->
	<button type="button" value="clear" id="clr" size="23" onclick="erase()">Clear</button>
	<br />
	<br />

	<canvas id="the-canvas" style="border: 1px solid black;"></canvas>
	<img id="canvasimg"  style="display:none;">
</div>
<div id="annotation-layer"></div>
<div id="editor"></div>
<script id="script">
    var pageNum = 1;
    var pdfScale = 1; // make pdfScale a global variable
    var shownPdf; // another global we'll use for the buttons
    var url = '' // PDF to load: change this to a file that exists;

    var __PDF_DOC,
        __CURRENT_PAGE,
        __TOTAL_PAGES,
        __PAGE_RENDERING_IN_PROGRESS = 0,
        __CANVAS = $('#the-canvas').get(0),
        __CANVAS_CTX = __CANVAS.getContext('2d');

    var pdfDoc = '';

    var widthCanvas = 0;
    var heightCanvas = 0;
    var drawCanvas = '';
    var drawContext = '';

		var canvasWidthOringin = 0;
		var canvasHeightOringin = 0;
		var cont = 0;

		var arrayImageData = [];

    var pagesSeen = 0;

    async function showPDF(pdf_url) {
			pdfDoc = PDFJS.getDocument(pdf_url).then(async function getPdfFile(pdf) {
				await displayPage(pdf, 1);
				shownPdf = pdf;
			});
			PDFJS.getDocument({ url: pdf_url }).then(async function (pdf_doc) {
				__PDF_DOC = pdf_doc;
				__TOTAL_PAGES = __PDF_DOC.numPages;
				// myState.pdf = pdf_doc;
				// Hide the pdf loader and show pdf container in HTML
				$("#pdf-total-pages").text(__TOTAL_PAGES);
				
    		$("#pdf-current-page").text('1');

				for(var x = 1;x <= __TOTAL_PAGES; x++) {
					var data = { numPage: x, dataImage: ''};
					arrayImageData.push(data);
				}
				//await loadPageInit(); no carga bien las primeras páginas
				// Show the first page
				//showPage(1);
			}).catch(function (error) {
				// If error re-show the upload button
				alert('catch ', error.message);
			});
    }

    async function renderPage(page) {
			var scale = pdfScale; // render with global pdfScale variable
			var viewport = page.getViewport(scale); // width and height are in points no pixels
			var canvas = document.getElementById('the-canvas');
			drawCanvas = canvas;
			var context = canvas.getContext('2d');
			drawContext = context;
			canvas.height = viewport.height;
			heightCanvas = viewport.height; // use in paint of canvas
			widthCanvas = viewport.width; // use in paint of canvas
			canvas.width = viewport.width;
			if ( cont < 1 ) {
				canvasHeightOringin = viewport.height * 0.352778; // point => mm
				canvasWidthOringin = viewport.width * 0.352778;
				cont++;
			}
			var renderContext = {
				canvasContext: context,
				viewport: viewport
			};
			page.render(renderContext);
      $("#controlpdf, #page-count-container").css('visibility', 'visible');
			
			init();
    }

    async function displayPage(pdf, num) {
      pdf.getPage(num).then(async function getPage(page) { await renderPage(page); });
    }

    var nextbutton = document.getElementById("nextbutton");
    nextbutton.onclick = async function () {
			if (pageNum >= shownPdf.numPages) {
				return;
			}
			arrayImageData[pageNum - 1].dataImage = canvas.toDataURL("image/jpeg", 1.0);
			pageNum++;
			$("#pdf-current-page").text(pageNum);
      pagesSeen = pageNum;
			if (arrayImageData[pageNum - 1].dataImage.length === 0) {
				await displayPage(shownPdf, pageNum);
      } else {
				document.getElementById("the-canvas").src = await loadImage();
			}
    }

		async function loadImage() {
			var imagen = new Image();
			if (arrayImageData[pageNum - 1].dataImage.length > 0) {
        imagen.src = arrayImageData[pageNum - 1].dataImage;
      } else {
        imagen.src = URL.createObjectURL($("#file-to-upload").get(0).files[0]);
      }
			imagen.onload = function () {
				canvas = document.getElementById('the-canvas');
				drawContext = canvas.getContext('2d');
				canvas.width = imagen.width;
				canvas.height = imagen.height;
				drawContext.scale(1, 1);
				drawContext.save();
			  drawContext.drawImage(imagen, 0, 0);
			};
			return imagen.src;
		}

    var prevbutton = document.getElementById("prevbutton");
    prevbutton.onclick = async function () {
			arrayImageData[pageNum - 1].dataImage = canvas.toDataURL("image/jpeg", 1.0);
			if (pageNum <= 1) {
				return;
			}
			pageNum--;
			$("#pdf-current-page").text(pageNum);
			document.getElementById("the-canvas").src = await loadImage();
    }
		/*
    var zoominbutton = document.getElementById("zoominbutton");
    zoominbutton.onclick = async function () {
			pdfScale = pdfScale + 0.25;
			await displayPage(shownPdf, pageNum);
    }

    var zoomoutbutton = document.getElementById("zoomoutbutton");
    zoomoutbutton.onclick = async function () {
			if (pdfScale <= 0.25) {
				return;
			}
			pdfScale = pdfScale - 0.25;
			await displayPage(shownPdf, pageNum);
    }
		*/
    // Upon click this should should trigger click on the #file-to-upload file input element
    // This is better than showing the not-good-looking file input element
    $("#upload-button").on('click', function () {
        $("#file-to-upload").trigger('click');
    });

    // When user chooses a PDF file
    $("#file-to-upload").on('change', async function () {
      // Validate whether PDF
      //erase();
      if($("#file-to-upload").get(0).files[0] !== undefined) {
        if (['application/pdf'].indexOf($("#file-to-upload").get(0).files[0].type) == -1) {
          alert('Error : Not a PDF');
          return;
        }
        await loadData();

        //$("#upload-button").hide();
        
        $("#controlpdf").css('visibility', 'hidden');
        // Send the object url of the pdf
        showPDF(URL.createObjectURL($("#file-to-upload").get(0).files[0]));
      }
    });

    async function loadData() {
      pdfScale = 1; // make pdfScale a global variable
      shownPdf; // another global we'll use for the buttons
      url = '' // PDF to load: change this to a file that exists;

       __PDF_DOC,
      __CURRENT_PAGE,
      __TOTAL_PAGES,
      __PAGE_RENDERING_IN_PROGRESS = 0,
      __CANVAS = $('#the-canvas').get(0),
      __CANVAS_CTX = __CANVAS.getContext('2d');

      pdfDoc = '';
			pageNum = 1;

      widthCanvas = 0;
      heightCanvas = 0;
      drawCanvas = '';
      drawContext = '';

		  canvasWidthOringin = 0;
		  canvasHeightOringin = 0;
		  cont = 0;

		  arrayImageData = [];

      pagesSeen = 0;
    }
		
    /////////////////// save PDF ///////////////////

    $('#cmd').click(async function () {
			$("#buttonTool").children().prop('disabled',true);
			if(pagesSeen < __TOTAL_PAGES) {
				arrayImageData[pageNum - 1].dataImage = canvas.toDataURL("image/jpeg", 1.0);
				pageNum++;
			  await loadPage();
				pagesSeen = __TOTAL_PAGES;
      } else {
				arrayImageData[pageNum - 1].dataImage = canvas.toDataURL("image/jpeg", 1.0);
			}
			var pdf = new jsPDF('p', 'mm', [canvasWidthOringin , canvasHeightOringin]);
			for (let x=0;x < __TOTAL_PAGES;x++){
				const imgData = arrayImageData[x].dataImage;
				pdf.setPage(x+1);//declare that we're working on that page
				pdf.addImage(imgData, 'jpeg', 0, 0, canvasWidthOringin , canvasHeightOringin);
				(__TOTAL_PAGES - 1 !== x ) ? pdf.addPage(): '';
			}
			$("#buttonTool").children().prop('disabled',false);
			await pdf.save("download.pdf"); 
    });

		function timeout(ms) {
			return new Promise(resolve => setTimeout(resolve, ms));
		}

		async function loadPage(){
			await displayPage(shownPdf, pageNum);
			var addArrayImage = false;
			for (let x = pageNum; x <= __TOTAL_PAGES + 1; x++) {
				$("#pdf-current-page").text(pageNum);
				pageNum = x;
				await timeout(1000);
				await PDFJS.getDocument(URL.createObjectURL($("#file-to-upload").get(0).files[0])).then(async function getPdfFile(shownPdf) {
					await displayPage(shownPdf, pageNum);
					if(addArrayImage) {
						arrayImageData[x - 2].dataImage = canvas.toDataURL("image/jpeg", 1.0);
					}
					addArrayImage = true;
				});
			}
			pageNum--;
		}

    ////////////////////////////////////////////////////

    /////////////////// draw canvas  ///////////////////
    var canvas, ctx, flag = false,
        prevX = 0,
        currX = 0,
        prevY = 0,
        currY = 0,
        dot_flag = false;

    var x = "black",
        y = 2;

    function init() {
			canvas = drawCanvas; //document.getElementById('the-canvas');
			//ctx = drawContext; //canvas.getContext("2d");
			w = widthCanvas;
			h = heightCanvas;

			canvas.addEventListener("mousemove", function (e) {
					findxy('move', e)
			}, false);
			canvas.addEventListener("mousedown", function (e) {
					findxy('down', e)
			}, false);
			canvas.addEventListener("mouseup", function (e) {
					findxy('up', e)
			}, false);
			canvas.addEventListener("mouseout", function (e) {
					findxy('out', e)
			}, false);
    }

    function color(obj) {
			switch (obj.id) {
				case "green":
						x = "green";
						break;
				case "blue":
						x = "blue";
						break;
				case "red":
						x = "red";
						break;
				case "yellow":
						x = "yellow";
						break;
				case "orange":
						x = "orange";
						break;
				case "black":
						x = "black";
						break;
				case "white":
						x = "white";
						break;
			}
			if (x == "white") y = 14;
			else y = 2;
    }
		
    function findxy(res, e) {
			if (res == 'down') {
				prevX = currX;
				prevY = currY;
				currX = e.clientX - canvas.offsetLeft;
				currY = e.clientY - canvas.offsetTop;

				flag = true;
				dot_flag = true;
				if (dot_flag) {
					drawContext.beginPath();
					drawContext.fillStyle = x;
					drawContext.fillRect(currX, currY, 2, 2);
					drawContext.closePath();
					dot_flag = false;
				}
			}
			if (res == 'up' || res == "out") {
				flag = false;
			}
			if (res == 'move') {
				if (flag) {
					prevX = currX;
					prevY = currY;
					currX = e.clientX - canvas.offsetLeft;
					currY = e.clientY - canvas.offsetTop;
					draw();
				}
			}
    }

    function draw() {
			drawContext.beginPath();
			drawContext.moveTo(prevX, prevY);
			drawContext.lineTo(currX, currY);
			drawContext.strokeStyle = x;
			drawContext.lineWidth = y;
			drawContext.stroke();
			drawContext.closePath();
    }

    function erase() {
      var canvasErase = document.getElementById('the-canvas');
			var contextErase = canvasErase.getContext('2d');
			//var m = confirm("Want to clear");
			//if (m) {
				contextErase.clearRect(0, 0, canvasErase.width, canvasErase.height);
        document.getElementById('the-canvas').value = "";
				$('#file-to-upload').val('');
        $("#controlpdf").css('visibility', 'hidden');
			//}
    }

		/*
    function save() {
			document.getElementById("canvasimg").style.border = "2px solid";
			var dataURL = canvas.toDataURL();
			document.getElementById("canvasimg").src = dataURL;
			document.getElementById("canvasimg").style.display = "inline";
    }
		*/
    //////////////////////////////////////////////
</script>

@{
  ViewBag.Title = "About";
}

<!--https://stackoverflow.com/questions/27607526/zoom-on-simple-pdf-js-viewer-->
<h1>Simple PDF.js with zoom</h1>
<button id="upload-button">Select PDF</button>
<input type="file" id="file-to-upload" accept="application/pdf" />
<button id="nextbutton" type="button">next page</button>
<button id="prevbutton" type="button">prev page</button>
<button id="zoominbutton" type="button">zoom in</button>
<button id="zoomoutbutton" type="button">zoom out</button>
<br>


<canvas id="the-canvas" style="border:1px  solid black"></canvas>

<script id="script">
  var pageNum = 1;
  var pdfScale = 1; // make pdfScale a global variable
  var shownPdf; // another global we'll use for the buttons
  var url = '18178221710.pdf' // PDF to load: change this to a file that exists;
  var __PDF_DOC,
    __CURRENT_PAGE,
    __TOTAL_PAGES,
    __PAGE_RENDERING_IN_PROGRESS = 0,
    __CANVAS = $('#the-canvas').get(0),
    __CANVAS_CTX = __CANVAS.getContext('2d');
  var pdfDoc = '';
  function showPDF(pdf_url) {
    $("#pdf-loader").show();
    pdfDoc = PDFJS.getDocument(pdf_url).then(function getPdfHelloWorld(pdf) {
      displayPage(pdf, 1);
      shownPdf = pdf;
    });
    PDFJS.getDocument({ url: pdf_url }).then(function (pdf_doc) {
      __PDF_DOC = pdf_doc;
      __TOTAL_PAGES = __PDF_DOC.numPages;
      myState.pdf = pdf_doc;
      // Hide the pdf loader and show pdf container in HTML
      $("#pdf-loader").hide();
      $("#pdf-contents").show();
      $("#pdf-total-pages").text(__TOTAL_PAGES);

      // Show the first page
      showPage(1);
    }).catch(function (error) {
      // If error re-show the upload button
      $("#pdf-loader").hide();
      $("#upload-button").show();

      alert(error.message);
    });;
  }
  function renderPage(page) {
    var scale = pdfScale; // render with global pdfScale variable
    var viewport = page.getViewport(scale);
    var canvas = document.getElementById('the-canvas');
    var context = canvas.getContext('2d');
    canvas.height = viewport.height;
    canvas.width = viewport.width;
    var renderContext = {
      canvasContext: context,
      viewport: viewport
    };
    page.render(renderContext);
  }

  function displayPage(pdf, num) {
    pdf.getPage(num).then(function getPage(page) { renderPage(page); });
  }



  var nextbutton = document.getElementById("nextbutton");
  nextbutton.onclick = function () {
    if (pageNum >= shownPdf.numPages) {
      return;
    }
    pageNum++;
    displayPage(shownPdf, pageNum);
  }

  var prevbutton = document.getElementById("prevbutton");
  prevbutton.onclick = function () {
    if (pageNum <= 1) {
      return;
    }
    pageNum--;
    displayPage(shownPdf, pageNum);
  }

  var zoominbutton = document.getElementById("zoominbutton");
  zoominbutton.onclick = function () {
    pdfScale = pdfScale + 0.25;
    displayPage(shownPdf, pageNum);
  }

  var zoomoutbutton = document.getElementById("zoomoutbutton");
  zoomoutbutton.onclick = function () {
    if (pdfScale <= 0.25) {
      return;
    }
    pdfScale = pdfScale - 0.25;
    displayPage(shownPdf, pageNum);
  }
  // Upon click this should should trigger click on the #file-to-upload file input element
  // This is better than showing the not-good-looking file input element
  $("#upload-button").on('click', function () {
    $("#file-to-upload").trigger('click');
  });

  // When user chooses a PDF file
  $("#file-to-upload").on('change', function () {
    // Validate whether PDF
    if (['application/pdf'].indexOf($("#file-to-upload").get(0).files[0].type) == -1) {
      alert('Error : Not a PDF');
      return;
    }

    //$("#upload-button").hide();

    // Send the object url of the pdf
    showPDF(URL.createObjectURL($("#file-to-upload").get(0).files[0]));
  });

  // Previous page of the PDF
  $("#pdf-prev").on('click', function () {
    if (__CURRENT_PAGE != 1)
      showPage(--__CURRENT_PAGE);
  });

  // Next page of the PDF
  $("#pdf-next").on('click', function () {
    if (__CURRENT_PAGE != __TOTAL_PAGES)
      showPage(++__CURRENT_PAGE);
  });

</script>

@{
    ViewBag.Title = "About";
}

<!--https://stackoverflow.com/questions/27607526/zoom-on-simple-pdf-js-viewer-->
<button id="upload-button">Select PDF</button>
<input type="file" id="file-to-upload" accept="application/pdf" />
<div id="controlpdf" style="text-align: center">
	<button id="prevbutton" type="button">prev page</button>
	<button id="nextbutton" type="button">next page</button>
	<button id="zoominbutton" type="button">zoom in</button>
	<button id="zoomoutbutton" type="button">zoom out</button>
	<button id="cmd">generate PDF</button>
</div>
<div style="text-align: center;margin-top: 17px;margin-bottom: 10px;font-weight: bolder;">Choose Color</div>
<div style="text-align: center">
	<button type="button" style="background:green;" id="green" onclick="color(this)">green</button>
	<button type="button" style="background:blue;" id="blue" onclick="color(this)">blue</button>
	<button type="button" style="background:red;" id="red" onclick="color(this)">red</button>
	<button type="button" style="background:yellow;" id="yellow" onclick="color(this)">yellow</button>
	<button type="button" style="background:orange;" id="orange" onclick="color(this)">orange</button>
	<button type="button" style="background:black;color:white" id="black" onclick="color(this)">black</button>
	<button type="button" style="background:white;" id="white" onclick="color(this)">white</button>
	<button type="button">Eraser</button>

	<button type="button" value="save" id="btn" size="30" onclick="save()">Save</button>
	<button type="button" value="clear" id="clr" size="23" onclick="erase()">Clear</button>
	<br />
	<br />

	<canvas id="the-canvas" style="border: 1px solid black;"></canvas>
	<img id="canvasimg"  style="display:none;">
</div>
<div id="annotation-layer"></div>
<div id="editor"></div>
<script id="script">
    var myState = {
			pdf: null,
			currentPage: 1,
			zoom: 1
    }
    var pageNum = 1;
    var pdfScale = 1; // make pdfScale a global variable
    var shownPdf; // another global we'll use for the buttons
    var url = '' // PDF to load: change this to a file that exists;

    var __PDF_DOC,
        __CURRENT_PAGE,
        __TOTAL_PAGES,
        __PAGE_RENDERING_IN_PROGRESS = 0,
        __CANVAS = $('#the-canvas').get(0),
        __CANVAS_CTX = __CANVAS.getContext('2d');

    var pdfDoc = '';

    var widthCanvas = 0;
    var heightCanvas = 0;
    var drawCanvas = '';
    var drawCcontext = '';

		var canvasWidthOringin = 0;
		var canvasHeightOringin = 0;
		var cont = 0;

		var arrayImageData = [];

    function showPDF(pdf_url) {
			$("#pdf-loader").show();
			pdfDoc = PDFJS.getDocument(pdf_url).then(function getPdfHelloWorld(pdf) {
				console.log('pdf: ', pdf);
				displayPage(pdf, 1);
				shownPdf = pdf;
			});
			PDFJS.getDocument({ url: pdf_url }).then(function (pdf_doc) {
				__PDF_DOC = pdf_doc;
				__TOTAL_PAGES = __PDF_DOC.numPages;
				myState.pdf = pdf_doc;
				// Hide the pdf loader and show pdf container in HTML
				$("#pdf-loader").hide();
				$("#pdf-contents").show();
				$("#pdf-total-pages").text(__TOTAL_PAGES);

				for(var x = 0;x < __TOTAL_PAGES; x++) {
					var data = { 'numPage': x +1, 'dataImage': ''};
					arrayImageData.push(data);
				}
				console.log('arrayImageData: ', arrayImageData);
				// Show the first page
				//showPage(1);
			}).catch(function (error) {
				// If error re-show the upload button
				$("#pdf-loader").hide();
				$("#upload-button").show();

				alert(error.message);
			});;
    }

    function renderPage(page) {
			var scale = pdfScale; // render with global pdfScale variable
			var viewport = page.getViewport(scale); // width and height are in points no pixels
			console.log('viewport: ', viewport);
			var canvas = document.getElementById('the-canvas');
			console.log('canvas: ', canvas);
			drawCanvas = canvas;
			var context = canvas.getContext('2d');
			drawCcontext = context;
			canvas.height = viewport.height;
			heightCanvas = viewport.height; // use in paint of canvas
			widthCanvas = viewport.width; // use in paint of canvas
			canvas.width = viewport.width;
			if ( cont < 1 ) {
				canvasHeightOringin = viewport.height * 0.352778; // point => mm
				canvasWidthOringin = viewport.width * 0.352778;
				cont++;
			}
			console.log('canvasHeightOringin: ', canvasHeightOringin);
			var renderContext = {
				canvasContext: context,
				viewport: viewport
			};
			page.render(renderContext);
			init();
    }

    function displayPage(pdf, num) {
      pdf.getPage(num).then(function getPage(page) { renderPage(page); });
    }

    var nextbutton = document.getElementById("nextbutton");
    nextbutton.onclick = function () {
			console.log('pageNum: ', pageNum);
			console.log('drawCanvas: ', drawCanvas.toDataURL("image/jpeg", 1.0));
			if (pageNum >= shownPdf.numPages) {
				return;
			}
			pageNum++;
			displayPage(shownPdf, pageNum);
    }

    var prevbutton = document.getElementById("prevbutton");
    prevbutton.onclick = function () {
			console.log('pageNum: ', pageNum);
			console.log('drawCanvas: ', drawCanvas.toDataURL("image/jpeg", 1.0));// string
			if (pageNum <= 1) {
				return;
			}
			pageNum--;
			displayPage(shownPdf, pageNum);
    }

    var zoominbutton = document.getElementById("zoominbutton");
    zoominbutton.onclick = function () {
			pdfScale = pdfScale + 0.25;
			displayPage(shownPdf, pageNum);
    }

    var zoomoutbutton = document.getElementById("zoomoutbutton");
    zoomoutbutton.onclick = function () {
			if (pdfScale <= 0.25) {
				return;
			}
			pdfScale = pdfScale - 0.25;
			displayPage(shownPdf, pageNum);
    }
    // Upon click this should should trigger click on the #file-to-upload file input element
    // This is better than showing the not-good-looking file input element
    $("#upload-button").on('click', function () {
        $("#file-to-upload").trigger('click');
    });

    // When user chooses a PDF file
    $("#file-to-upload").on('change', function () {
        // Validate whether PDF
        if (['application/pdf'].indexOf($("#file-to-upload").get(0).files[0].type) == -1) {
            alert('Error : Not a PDF');
          return;
        }

        //$("#upload-button").hide();

        // Send the object url of the pdf
        showPDF(URL.createObjectURL($("#file-to-upload").get(0).files[0]));
    });

    // Previous page of the PDF
    $("#pdf-prev").on('click', function () {
        if (__CURRENT_PAGE != 1)
          showPage(--__CURRENT_PAGE);
    });

    // Next page of the PDF
    $("#pdf-next").on('click', function () {
        if (__CURRENT_PAGE != __TOTAL_PAGES)
          showPage(++__CURRENT_PAGE);
    });

    /////////////////// save  - dont work ///////////////////////////
    var doc = new jsPDF();
    var specialElementHandlers = {
        '#editor': function (element, renderer) {
            return true;
        }
    };
    console.log('doc: ', doc);
    $('#cmd').click(function () {
        /*doc.fromHTML($('#the-canvas').html(), widthCanvas, heightCanvas, {
            'width': widthCanvas,
            'elementHandlers': specialElementHandlers
        });
        doc.save('sample-file.pdf');*/
		drawCanvas.scale 
		const imgData = drawCanvas.toDataURL("image/jpeg", 1.0); 
		var pdf = new jsPDF('p', 'mm', [canvasWidthOringin , canvasHeightOringin  ]);// size of PDF
		pdf.addImage(imgData, 'JPEG', 0, 0, canvasWidthOringin , canvasHeightOringin ); 
		
		//pdf.save("download.jpg"); don´t work
		pdf.save("download.pdf"); 
    });

    //////////////////////////////////////////////

    /////// draw canvas  ///////////////////
    var canvas, ctx, flag = false,
        prevX = 0,
        currX = 0,
        prevY = 0,
        currY = 0,
        dot_flag = false;

    var x = "black",
        y = 2;

    function init() {
		canvas = drawCanvas; //document.getElementById('the-canvas');
		ctx = drawCcontext; //canvas.getContext("2d");
		w = widthCanvas;
		h = heightCanvas;

		canvas.addEventListener("mousemove", function (e) {
				findxy('move', e)
		}, false);
		canvas.addEventListener("mousedown", function (e) {
				findxy('down', e)
		}, false);
		canvas.addEventListener("mouseup", function (e) {
				findxy('up', e)
		}, false);
		canvas.addEventListener("mouseout", function (e) {
				findxy('out', e)
		}, false);
    }

    function color(obj) {
			switch (obj.id) {
				case "green":
						x = "green";
						break;
				case "blue":
						x = "blue";
						break;
				case "red":
						x = "red";
						break;
				case "yellow":
						x = "yellow";
						break;
				case "orange":
						x = "orange";
						break;
				case "black":
						x = "black";
						break;
				case "white":
						x = "white";
						break;
			}
			if (x == "white") y = 14;
			else y = 2;
    }

    function draw() {
			ctx.beginPath();
			ctx.moveTo(prevX, prevY);
			ctx.lineTo(currX, currY);
			ctx.strokeStyle = x;
			ctx.lineWidth = y;
			ctx.stroke();
			ctx.closePath();
    }

    function erase() {
			var m = confirm("Want to clear");
			if (m) {
				ctx.clearRect(0, 0, w, h);
				document.getElementById("canvasimg").style.display = "none";
			}
    }

    function save() {
			document.getElementById("canvasimg").style.border = "2px solid";
			var dataURL = canvas.toDataURL();
			document.getElementById("canvasimg").src = dataURL;
			document.getElementById("canvasimg").style.display = "inline";
    }

    function findxy(res, e) {
			if (res == 'down') {
				prevX = currX;
				prevY = currY;
				currX = e.clientX - canvas.offsetLeft;
				currY = e.clientY - canvas.offsetTop;

				flag = true;
				dot_flag = true;
				if (dot_flag) {
					ctx.beginPath();
					ctx.fillStyle = x;
					ctx.fillRect(currX, currY, 2, 2);
					ctx.closePath();
					dot_flag = false;
				}
			}
			if (res == 'up' || res == "out") {
				flag = false;
			}
			if (res == 'move') {
				if (flag) {
					prevX = currX;
					prevY = currY;
					currX = e.clientX - canvas.offsetLeft;
					currY = e.clientY - canvas.offsetTop;
					draw();
				}
			}
    }
    //////////////////////////////////////////////
</script>
